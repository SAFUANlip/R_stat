# compute the difference quotient
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincY1 <- (Yobs0[3:NT]-Yobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincZ1 <- (Zobs0[3:NT]-Zobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincY2 <- ((Yobs0[3:NT]-Yobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Yobs0[2:(NT-1)]-Yobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincZ2 <- ((Zobs0[3:NT]-Zobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Zobs0[2:(NT-1)]-Zobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab=expression(tilde(s)),ylab="observed data x",cex=0.1,asp=1)
plot(abscissa,obs0[2,],xlab=expression(tilde(s)),ylab="observed data y",cex=0.1,asp=1)
plot(abscissa,obs0[3,],xlab=expression(tilde(s)),ylab="observed data z",cex=0.1,asp=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab=expression(tilde(s)),ylab="first differences x",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincY1,xlab=expression(tilde(s)),ylab="first differences y",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincZ1,xlab=expression(tilde(s)),ylab="first differences z",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincX2,xlab=expression(tilde(s)),ylab="second differences x",type="l")
plot(abscissa[2:(NT-1)],rappincY2,xlab=expression(tilde(s)),ylab="second differences y",type="l")
plot(abscissa[2:(NT-1)],rappincZ2,xlab=expression(tilde(s)),ylab="second differences z",type="l")
bw <- 0.05
Xsm0 <- locpoly(abscissa,Xobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm0 <- Xsm0$y
Xsm1 <- locpoly(abscissa,Xobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm1 <- Xsm1$y
Xsm2 <- locpoly(abscissa,Xobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm2 <- Xsm2$y
Ysm0 <- locpoly(abscissa,Yobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm0 <- Ysm0$y
Ysm1 <- locpoly(abscissa,Yobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm1 <- Ysm1$y
Ysm2 <- locpoly(abscissa,Yobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm2 <- Ysm2$y
Zsm0 <- locpoly(abscissa,Zobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm0 <- Zsm0$y
Zsm1 <- locpoly(abscissa,Zobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm1 <- Zsm1$y
Zsm2 <- locpoly(abscissa,Zobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm2 <- Zsm2$y
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab="s",ylab="x",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Xsm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[2,],xlab="s",ylab="y",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Ysm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[3,],xlab="s",ylab="z",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Zsm0,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="s",ylab="x'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Xsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY1,xlab="s",ylab="y'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Ysm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ1,xlab="s",ylab="z'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Zsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="s",ylab="x''",type="l")
points(abscissa,Xsm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY2,xlab="s",ylab="y''",type="l")
points(abscissa,Ysm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ2,xlab="s",ylab="z''",type="l")
points(abscissa,Zsm2,type="l",col="blue",lwd=2)
open3d()
lines3d(t(true0[1,]),t(true0[2,]),t(true0[3,]),xlab="",ylab="",zlab="",size=3,axes=F)
points3d(t(obs0[1,]),t(obs0[2,]),t(obs0[3,]),size=2,pch=19,cex=2)
lines3d(t(Xsm0),t(Ysm0),t(Zsm0),size=3,col="blue")
box3d()
#### First dataset: canadian weather ####
# daily temperatures recorded in 35 weather stations of Canada
# (data are averages over 35 years - 1960 to 1994)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
# Choice 2: reduced dimensionality (we set a low dimensional basis)
# Pros: the data are much smoother and the measurement error is filtered
# Cons: I could have lost important information
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21) # more strong smoothing
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=73)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
# estimate of the mean and of the covariance kernel
library(fields)
x11(width=10)
par(mfrow=c(2,3))
#mean
plot.fd(data_W.fd.1)
lines(mean.fd(data_W.fd.1),lwd=3)
plot.fd(data_W.fd.2)
lines(mean.fd(data_W.fd.2),lwd=2)
plot.fd(data_W.fd.3)
lines(mean.fd(data_W.fd.3),lwd=2)
# covariance
eval.1 <- eval.fd(time,data_W.fd.1)
image.plot(time,time,(cov(t(eval.1))[1:365,]))
eval.2 <- eval.fd(time,data_W.fd.2)
image.plot(time,time,(cor(t(eval.2))[1:365,]))
eval.3 <- eval.fd(time,data_W.fd.3)
image.plot(time,time,(cov(t(eval.3))[1:365,]))
graphics.off()
##### FPCA #####
help(pca.fd)
# interpolated data (Choice 3)
plot.fd(data_W.fd.3,ylab='temperature')
pca_W.3 <- pca.fd(data_W.fd.3, nharm=5, centerfns=TRUE)
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
pca_W.3$values
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.3$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.3$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.3)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=2)
lines(media-pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=2)
lines(media-pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=3)
# Command of the library fda that automatically does these plots
par(mfrow=c(1,2))
plot(pca_W.3, nx=100, pointplot=TRUE, harm=c(1,2), expand=0, cycle=FALSE)
graphics.off()
###
# smooth data (Choice 2)
plot.fd(data_W.fd.2)
pca_W.2 <- pca.fd(data_W.fd.2,nharm=5,centerfns=TRUE)
# scree plot
plot(pca_W.2$values,xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.2$values)/sum(pca_W.2$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.2$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.2$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.2)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='PC1')
lines(media+pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=2)
###
# smooth data (Choice 2)
plot.fd(data_W.fd.2)
pca_W.2 <- pca.fd(data_W.fd.2,nharm=5,centerfns=TRUE)
###
# smooth data (Choice 2)
plot.fd(data_W.fd.2)
pca_W.2 <- pca.fd(data_W.fd.2,nharm=5,centerfns=TRUE)
# scree plot
plot(pca_W.2$values,xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.2$values)/sum(pca_W.2$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.2$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.2$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.2)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='PC1')
lines(media+pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=2)
lines(media-pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='PC2')
lines(media+pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=2)
lines(media-pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=3)
graphics.off()
# scatter plot of the scores
par(mfrow=c(1,2))
plot(pca_W.3$scores[,1],pca_W.3$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca_W.3$scores[35,1],pca_W.3$scores[35,2],col=2, lwd=4)
plot(pca_W.3$scores[,1],pca_W.3$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2",xlim=c(-400,250))
text(pca_W.3$scores[,1],pca_W.3$scores[,2],dimnames(data_W)[[2]], cex=1)
layout(1)
matplot(eval.3,type='l')
lines(eval.3[,35],lwd=4, col=2) #temperature profile for Resolute
coord <- CanadianWeather$coordinates
coord[,2] <- -coord[,2]
plot(coord[,2:1],col=0)
text(coord[,2:1],rownames(coord))
graphics.off()
#### Second dataset: lip ####
# 51 measurements of the position of the lower lip every 7
# milliseconds for 20 repetitions of the syllable 'bob'.
help(lip)
data_L <- lip
time <- seq(0,350,by=7)
matplot(time,data_L,type='l',main='Lip data',ylab='Position',
xlab='Time (millisec.)')
basis <- create.fourier.basis(rangeval=c(0,350),nbasis=51)
data_L.fd <- Data2fd(data_L,time,basis)
plot.fd(data_L.fd, main="Fourier")
# Better to use a b-spline basis
basis <- create.bspline.basis(rangeval=c(0,350),nbasis=21)
data_L.fd <- Data2fd(y = data_L,argvals = time,basisobj = basis)
plot.fd(data_L.fd, main="B-splines")
layout(cbind(1,2))
plot.fd(data_L.fd,xaxs='i')
lines(mean.fd(data_L.fd),lwd=2)
eval <- eval.fd(time,data_L.fd)
x11()
image.plot(time, time, (cov(t(eval))[1:51,]))
plot.fd(data_L.fd)
pca_L <- pca.fd(data_L.fd,nharm=5,centerfns=TRUE)
# scree plot
plot(pca_L$values,xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_L$values)/sum(pca_L$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# First three FPCs
x11()
layout(cbind(1,2,3))
plot(pca_L$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.09,0.11))
plot(pca_L$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.09,0.11))
plot(pca_L$harmonics[3,],col=3,ylab='FPC3',ylim=c(-0.09,0.11))
# plot of the principal components as perturbation of the mean
media <- mean.fd(data_L.fd)
plot(media,lwd=2,ylim=c(-10,12),main='FPC1')
lines(media+pca_L$harmonic[1,]*sqrt(pca_L$values[1]), col=2)
lines(media-pca_L$harmonic[1,]*sqrt(pca_L$values[1]), col=3)
plot(media,lwd=2,ylim=c(-10,12),main='FPC2')
lines(media+pca_L$harmonic[2,]*sqrt(pca_L$values[2]), col=2)
lines(media-pca_L$harmonic[2,]*sqrt(pca_L$values[2]), col=3)
plot(media,lwd=2,ylim=c(-10,12),main='FPC3')
lines(media+pca_L$harmonic[3,]*sqrt(pca_L$values[3]), col=2)
lines(media-pca_L$harmonic[3,]*sqrt(pca_L$values[3]), col=3)
# Command of the library fda that automatically does these plots
par(mfrow=c(1,3))
plot.pca.fd(pca_L, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# Scores
layout(cbind(1,2,3))
plot(pca_L$scores[,1],pca_L$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca_L$scores[12,1],pca_L$scores[12,2],col=2, lwd=4)
points(pca_L$scores[9,1],pca_L$scores[9,2],col=3, lwd=4)
plot(pca_L$scores[,1],pca_L$scores[,3],xlab="Scores FPC1",ylab="Scores FPC3",lwd=2)
points(pca_L$scores[12,1],pca_L$scores[12,3],col=2, lwd=4)
points(pca_L$scores[9,1],pca_L$scores[9,3],col=3, lwd=4)
plot(pca_L$scores[,2],pca_L$scores[,3],xlab="Scores FPC2",ylab="Scores FPC3",lwd=2)
points(pca_L$scores[12,2],pca_L$scores[12,3],col=2, lwd=4)
points(pca_L$scores[9,2],pca_L$scores[9,3],col=3, lwd=4)
layout(1)
matplot(eval,type='l')
lines(eval[,12],lwd=4, col=2)
lines(eval[,9],lwd=4, col=3)
graphics.off()
power <- read.table("power.txt", h=TRUE)
power <- read.table("power.txt", h=TRUE)
power <- read.table("power.txt", h=TRUE)
View(power)
Xobs0 <- power$power
nbasis <- 2:365
gcv <- numeric(length(nbasis))
nbasis <- 2:365
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(c(0,365), Xobs0, basis)$gcv
}
nbasis <- 2:365
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(c(1,365), Xobs0, basis)$gcv
}
length(Xobs0)
nbasis <- 2:365
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(1:365, Xobs0, basis)$gcv
}
power <- read.table("power.txt", h=TRUE)
Xobs0 <- power$power
length(Xobs0)
nbasis <- 2:365
power <- read.table("power.txt", h=TRUE)
Xobs0 <- power$power
length(Xobs0)
nbasis <- 2:365
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(1:365, Xobs0, basis)$gcv
}
gcv
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v = nbasis[which.min(gcv)], col = 2)
gcv
nbasis <- 2:100
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(1:365, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v = nbasis[which.min(gcv)], col = 2)
gcv
nbasis[which.min(gcv)]
basis14 <- create.fourier.basis(c(0,365), nbasis[which.min(gcv)])
t <- 1:365
abscissa <- 1:365
power <- read.table("power.txt", h=TRUE)
Xobs0 <- power$power
length(Xobs0)
abscissa <- 1:365
nbasis <- 2:100
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v = nbasis[which.min(gcv)], col = 2)
nbasis[which.min(gcv)]
basis14 <- create.fourier.basis(c(0,365), nbasis[which.min(gcv)])
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
Xsp0 <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0 ,type="l",col="blue",lwd=2)
length(Xsp0)
Xsp0
Xsp0$y
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xsp0$y ,type="l",col="blue",lwd=2)
View(Xsp0)
power <- read.table("power.txt", h=TRUE)
Xobs0 <- power$power
length(Xobs0)
abscissa <- 1:365
nbasis <- 2:100
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v = nbasis[which.min(gcv)], col = 2)
nbasis[which.min(gcv)]
basis14 <- create.fourier.basis(c(0,365), nbasis[which.min(gcv)])
Xsp0 <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xsp0$y ,type="l",col="blue",lwd=2)
points(Xsp0$y ,type="l",col="blue",lwd=2)
abline(v=basis$params)
plot(basis14)
Xss <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xss0$y ,type="l",col="blue",lwd=2)
points(abscissa, Xss0 ,type="l",col="blue",lwd=2)
# b)
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
# b)
NT <- length(abscissa)
# c)
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
points(abscissa, Xss1,type='l',col="orange",lwd=3)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
points(abscissa, Xss1,type='l',col="orange",lwd=3)
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
# c)
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
plot(abscissa[2:(NT-1)], rappincX2,xlab="t",ylab="second differences x",type="l",main = "2nd derivative")
points(abscissa, Xss2, type='l',col="orange",lwd=3)
graphics.off()
rm(list=ls())
library(fda)
data <- read.table('power.txt', header=T)
dim(data)
head(data)
NT <- dim(data)[1]
abscissa <- 1:365
Xobs0 <- data$power
plot(abscissa,Xobs0, type = "l")
# generalized cross-validation
nbasis <- 6:50
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(range(abscissa), nbasis[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v=nbasis[which.min(gcv)],col='red')
basis <- create.fourier.basis(rangeval=range(abscissa), nbasis=nbasis[which.min(gcv)])
plot(basis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="red",lwd=2)
# compute the central finite differences
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
Xsp1bis <- eval.fd(abscissa, Xsp$fd, Lfd=1) # first derivative
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsp1bis,type='l',col="orange",lwd=3)
# oversmoothing
nbasis <- 5
basis <- create.fourier.basis(rangeval=range(abscissa), nbasis=nbasis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="red",lwd=2)
# overfitting
nbasis <- 50
# b)
NT <- length(abscissa)
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
points(abscissa, Xss1,type='l',col="orange",lwd=3)
Xss <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xss0 ,type="l",col="blue",lwd=2)
power <- read.table("power.txt", h=TRUE)
Xobs0 <- power$power
length(Xobs0)
abscissa <- 1:365
nbasis <- 2:100
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(c(0,365), nbasis[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v = nbasis[which.min(gcv)], col = 2)
nbasis[which.min(gcv)]
basis14 <- create.fourier.basis(c(0,365), nbasis[which.min(gcv)])
plot(basis14)
Xss <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis14)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xss0 ,type="l",col="blue",lwd=2)
# b)
NT <- length(abscissa)
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l",main = "1st derivative")
points(abscissa, Xss1,type='l',col="orange",lwd=3)
# second derivative
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
plot(abscissa[2:(NT-1)], rappincX2,xlab="t",ylab="second differences x",type="l",main = "2nd derivative")
basis3 <- create.fourier.basis(c(0,365), 3)
plot(basis3)
Xss_b3 <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis3)
Xss0_b3 <- eval.fd(abscissa, Xss_b3$fd, Lfd=0)
par(mfrow=c(1,1))
plot(abscissa,Xobs0_b3,xlab="t",ylab="observed data")
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xss0_b3 ,type="l",col="blue",lwd=2)
# d)
basis200 <- create.fourier.basis(c(0,365), 200)
plot(basis200)
# d)
basis200 <- create.fourier.basis(c(0,365), 200)
plot(basis200)
Xss_b200 <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis200)
Xss0_b200 <- eval.fd(abscissa, Xss_b200$fd, Lfd=0)
par(mfrow=c(1,1))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa, Xss0_b200 ,type="l",col="blue",lwd=2)
