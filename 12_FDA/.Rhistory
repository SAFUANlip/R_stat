points(truecurve$Abscissa,truecurve$X2vera,type='l',col="orange",lwd=3)
dev.off()
# Load package fda
library(fda)
# Set parameters
# so m = 1 => y =constant (degree m - 1), m = 2 (degree = 2 - 1, y=kx+b (polynomial of degree 1))
m <- 6           # spline order  # should be chosen from the nature of nature =>
# m−2 order of their derivatives!
degree <- m-1    # spline degree (degree of polynomilas, which will be used in basis functions)
nbasis <- 10 # number of internal
# Create the basis
help(create.bspline.basis)
basis <- create.bspline.basis(rangeval=c(0,1), nbasis=nbasis, norder=m)
# If breaks are not provided, equally spaced knots are created
names(basis)
# Set parameters
# so m = 1 => y =constant (degree m - 1), m = 2 (degree = 2 - 1, y=kx+b (polynomial of degree 1))
m <- 6           # spline order  # should be chosen from the nature of nature =>
# m−2 order of their derivatives!
degree <- m-1    # spline degree (degree of polynomilas, which will be used in basis functions)
nbasis <- 10 # number of internal
# Create the basis
help(create.bspline.basis)
basis <- create.bspline.basis(rangeval=c(0,1), nbasis=nbasis, norder=m)
# If breaks are not provided, equally spaced knots are created
names(basis)
basis$basisvalues
plot(basis)
# Сетка
x <- seq(0, 1, length.out = 200)
y_all <- eval.basis(x, basis)
# Цвета — используем готовую палитру R
colors <- rainbow(nbasis)
# Инициализация графика (пустой)
plot(x, y_all[,1], type='n', ylim=range(y_all),
xlab="x", ylab="Basis Function Value",
main="B-spline Basis Functions")
# Цикл по всем базисным функциям
for (i in 1:nbasis) {
lines(x, y_all[,i], col=colors[i], lwd=2)
}
# Добавим внутренние узлы
abline(v = basis$params, col = "gray60", lty = 3)
# Легенда
legend("topright", legend=paste("B", 1:nbasis, sep=""),
col=colors, lwd=2, cex=0.8)
abscissa <- noisycurve3D$Abscissa
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=1)
points(abscissa,Xss0bis ,type="l",col="green",lwd=1)
breaks <- abscissa[((0:50)*2)+1]
breaks <- abscissa
m <- 6 # second derivatives will be cubic splines
basis <- create.bspline.basis(breaks, norder=m)
basis$nbasis
functionalPar <- fdPar(fdobj=basis, Lfdobj=m-2, lambda=1e-9)  # we have to penalise second derivative, so m-2 (6-2 = 4th derivative)
Xss <- smooth.basis(abscissa, Xobs0, functionalPar)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0) # zero derivative (fit to data)
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1) # first derivative (fit to first derivative)
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
# it's how to choose degree
df <- Xss$df   #  the degrees of freedom in the smoothing curve
df
gcv <- Xss$gcv  #  the value of the gcv statistic
gcv
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2 ,type="l",col="blue",lwd=2)
# change lambda: 1e-5 # much larger lambda
functionalParbis <- fdPar(fdobj=basis, Lfdobj=4, lambda=1e-5)
Xssbis <- smooth.basis(abscissa, Xobs0, functionalParbis)
Xss0bis <- eval.fd(abscissa, Xssbis$fd, Lfd=0)
Xss1bis <- eval.fd(abscissa, Xssbis$fd, Lfd=1)
Xss2bis <- eval.fd(abscissa, Xssbis$fd, Lfd=2)
dfbis <- Xssbis$df   #  the degrees of freedom in the smoothing curve
dfbis
gcvbis <- Xssbis$gcv  #  the value of the gcv statistic
gcvbis
# change lambda: 1e-14
functionalParter <- fdPar(fdobj=basis, Lfdobj=4, lambda=1e-14)
Xsster <- smooth.basis(abscissa, Xobs0, functionalParter)
Xss0ter <- eval.fd(abscissa, Xsster$fd, Lfd=0)
Xss1ter <- eval.fd(abscissa, Xsster$fd, Lfd=1)
Xss2ter <- eval.fd(abscissa, Xsster$fd, Lfd=2)
dfter <- Xsster$df   #  the degrees of freedom in the smoothing curve
dfter
gcvter <- Xsster$gcv  #  the value of the gcv statistic
gcvter
# red one - lowest lambda, so we overfitting (low bias, high variance)
# when we have to choose smoothing parameters, also look on derivatives
# for example, red line maybe don't show overfitting on data, but show it on derivatives
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=2)
points(abscissa,Xss0bis ,type="l",col="green",lwd=2)
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1ter ,type="l",col="red",lwd=2)
points(abscissa,Xss1bis ,type="l",col="green",lwd=2)
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2ter ,type="l",col="red",lwd=2)
points(abscissa,Xss2bis ,type="l",col="green",lwd=2)
# red one - lowest lambda, so we overfitting (low bias, high variance)
# when we have to choose smoothing parameters, also look on derivatives
# for example, red line maybe don't show overfitting on data, but show it on derivatives
par(mfrow=c(1,3))
# red one - lowest lambda, so we overfitting (low bias, high variance)
# when we have to choose smoothing parameters, also look on derivatives
# for example, red line maybe don't show overfitting on data, but show it on derivatives
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=2)
points(abscissa,Xss0bis ,type="l",col="green",lwd=2)
breaks <- abscissa[((0:50)*2)+1]
breaks <- abscissa
m <- 6 # second derivatives will be cubic splines
basis <- create.bspline.basis(breaks, norder=m)
basis$nbasis
functionalPar <- fdPar(fdobj=basis, Lfdobj=m-2, lambda=1e-9)  # we have to penalise second derivative, so m-2 (6-2 = 4th derivative)
Xss <- smooth.basis(abscissa, Xobs0, functionalPar)
Xss0 <- eval.fd(abscissa, Xss$fd, Lfd=0) # zero derivative (fit to data)
Xss1 <- eval.fd(abscissa, Xss$fd, Lfd=1) # first derivative (fit to first derivative)
Xss2 <- eval.fd(abscissa, Xss$fd, Lfd=2)
# it's how to choose degree
df <- Xss$df   #  the degrees of freedom in the smoothing curve
df
gcv <- Xss$gcv  #  the value of the gcv statistic
gcv
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2 ,type="l",col="blue",lwd=2)
# change lambda: 1e-5 # much larger lambda
functionalParbis <- fdPar(fdobj=basis, Lfdobj=4, lambda=1e-5)
Xssbis <- smooth.basis(abscissa, Xobs0, functionalParbis)
Xss0bis <- eval.fd(abscissa, Xssbis$fd, Lfd=0)
Xss1bis <- eval.fd(abscissa, Xssbis$fd, Lfd=1)
Xss2bis <- eval.fd(abscissa, Xssbis$fd, Lfd=2)
dfbis <- Xssbis$df   #  the degrees of freedom in the smoothing curve
dfbis
gcvbis <- Xssbis$gcv  #  the value of the gcv statistic
gcvbis
# change lambda: 1e-14
functionalParter <- fdPar(fdobj=basis, Lfdobj=4, lambda=1e-14)
Xsster <- smooth.basis(abscissa, Xobs0, functionalParter)
Xss0ter <- eval.fd(abscissa, Xsster$fd, Lfd=0)
Xss1ter <- eval.fd(abscissa, Xsster$fd, Lfd=1)
Xss2ter <- eval.fd(abscissa, Xsster$fd, Lfd=2)
dfter <- Xsster$df   #  the degrees of freedom in the smoothing curve
dfter
gcvter <- Xsster$gcv  #  the value of the gcv statistic
gcvter
# red one - lowest lambda, so we overfitting (low bias, high variance)
# when we have to choose smoothing parameters, also look on derivatives
# for example, red line maybe don't show overfitting on data, but show it on derivatives
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xss0ter ,type="l",col="red",lwd=2)
points(abscissa,Xss0bis ,type="l",col="green",lwd=2)
points(abscissa,Xss0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xss1ter ,type="l",col="red",lwd=2)
points(abscissa,Xss1bis ,type="l",col="green",lwd=2)
points(abscissa,Xss1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xss2ter ,type="l",col="red",lwd=2)
points(abscissa,Xss2bis ,type="l",col="green",lwd=2)
points(abscissa,Xss2 ,type="l",col="blue",lwd=2)
# generalized cross-validation
lambda <- 10^seq(-15,-5,by = 1)
gcv <- numeric(length(lambda)) # GCV - general cross validation
for (i in 1:length(lambda)){
functionalPar <- fdPar(fdobj=basis, Lfdobj=4, lambda=lambda[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, functionalPar)$gcv
}
par(mfrow=c(1,1))
plot(log10(lambda),gcv)
lambda[which.min(gcv)]
abline(v = lambda[which.min(gcv)], col = 2)
#### First dataset: canadian weather ####
# daily temperatures recorded in 35 weather stations of Canada
# (data are averages over 35 years - 1960 to 1994)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
data_W
View(data_W)
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1) # almost no difference, compared to source data (overfitting, undersmoothing)
View(data_W)
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1) # almost no difference, compared to source data (overfitting, undersmoothing)
# Choice 2: reduced dimensionality (we set a low dimensional basis)
# Pros: the data are much smoother and the measurement error is filtered
# Cons: I could have lost important information
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21) # more strong smoothing
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=73)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
# estimate of the mean and of the covariance kernel
library(fields)
x11(width=10)
par(mfrow=c(2,3))
#mean
plot.fd(data_W.fd.1)
lines(mean.fd(data_W.fd.1),lwd=3)
plot.fd(data_W.fd.2)
lines(mean.fd(data_W.fd.2),lwd=2)
plot.fd(data_W.fd.3)
lines(mean.fd(data_W.fd.3),lwd=2)
# covariance
eval.1 <- eval.fd(time,data_W.fd.1)
image.plot(time,time,(cov(t(eval.1))[1:365,]))
eval.2 <- eval.fd(time,data_W.fd.2)
image.plot(time,time,(cor(t(eval.2))[1:365,]))
eval.3 <- eval.fd(time,data_W.fd.3)
image.plot(time,time,(cov(t(eval.3))[1:365,]))
graphics.off()
##### FPCA #####
help(pca.fd)
# interpolated data (Choice 3)
plot.fd(data_W.fd.3,ylab='temperature')
pca_W.3 <- pca.fd(data_W.fd.3, nharm=5, centerfns=TRUE)
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.3$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.3$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.3)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=2)
lines(media-pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=2)
lines(media-pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=3)
# Command of the library fda that automatically does these plots
par(mfrow=c(1,2))
plot(pca_W.3, nx=100, pointplot=TRUE, harm=c(1,2), expand=0, cycle=FALSE)
setwd("~/Documents/politecnico/corsi/2024 Applied Statistics")
library(fda)
#### First dataset: canadian weather ####
# daily temperatures recorded in 35 weather stations of Canada
# (data are averages over 35 years - 1960 to 1994)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1) # almost no difference, compared to source data (overfitting, undersmoothing)
# Choice 2: reduced dimensionality (we set a low dimensional basis)
# Pros: the data are much smoother and the measurement error is filtered
# Cons: I could have lost important information
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21) # more strong smoothing
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=73)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
# estimate of the mean and of the covariance kernel
library(fields)
x11(width=10)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
time <- 1:365
# Choice 1: we set a high dimensional basis (interpolating)
# Pros: no loss of information
# Cons: possible overfitting
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1) # almost no difference, compared to source data (overfitting, undersmoothing)
# Choice 2: reduced dimensionality (we set a low dimensional basis)
# Pros: the data are much smoother and the measurement error is filtered
# Cons: I could have lost important information
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21) # more strong smoothing
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
# Choice 3: compromise between 1 and 2
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=73)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
# estimate of the mean and of the covariance kernel
library(fields)
x11(width=10)
par(mfrow=c(2,3))
#mean
plot.fd(data_W.fd.1)
lines(mean.fd(data_W.fd.1),lwd=3)
plot.fd(data_W.fd.2)
lines(mean.fd(data_W.fd.2),lwd=2)
plot.fd(data_W.fd.3)
lines(mean.fd(data_W.fd.3),lwd=2)
# covariance
eval.1 <- eval.fd(time,data_W.fd.1)
image.plot(time,time,(cov(t(eval.1))[1:365,]))
eval.2 <- eval.fd(time,data_W.fd.2)
image.plot(time,time,(cor(t(eval.2))[1:365,]))
eval.3 <- eval.fd(time,data_W.fd.3)
image.plot(time,time,(cov(t(eval.3))[1:365,]))
graphics.off()
##### FPCA #####
help(pca.fd)
# interpolated data (Choice 3)
plot.fd(data_W.fd.3,ylab='temperature')
pca_W.3 <- pca.fd(data_W.fd.3, nharm=5, centerfns=TRUE)
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.3$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.3$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.3)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=2)
lines(media-pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=2)
lines(media-pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=3)
layout(cbind(1,2))
plot(pca_W.3$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.3$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.3)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=2)
lines(media-pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=2)
lines(media-pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=3)
# Command of the library fda that automatically does these plots
par(mfrow=c(1,2))
plot(pca_W.3, nx=100, pointplot=TRUE, harm=c(1,2), expand=0, cycle=FALSE)
graphics.off()
###
# smooth data (Choice 2)
plot.fd(data_W.fd.2)
pca_W.2 <- pca.fd(data_W.fd.2,nharm=5,centerfns=TRUE)
# scree plot
plot(pca_W.2$values,xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.2$values)/sum(pca_W.2$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.2$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.2$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.2)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='PC1')
lines(media+pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=2)
lines(media-pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='PC2')
lines(media+pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=2)
lines(media-pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=3)
graphics.off()
# scatter plot of the scores
par(mfrow=c(1,2))
plot(pca_W.3$scores[,1],pca_W.3$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca_W.3$scores[35,1],pca_W.3$scores[35,2],col=2, lwd=4)
plot(pca_W.3$scores[,1],pca_W.3$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2",xlim=c(-400,250))
text(pca_W.3$scores[,1],pca_W.3$scores[,2],dimnames(data_W)[[2]], cex=1)
layout(1)
matplot(eval.3,type='l')
lines(eval.3[,35],lwd=4, col=2) #temperature profile for Resolute
coord <- CanadianWeather$coordinates
coord[,2] <- -coord[,2]
plot(coord[,2:1],col=0)
text(coord[,2:1],rownames(coord))
graphics.off()
#### Second dataset: lip ####
# 51 measurements of the position of the lower lip every 7
# milliseconds for 20 repetitions of the syllable 'bob'.
help(lip)
data_L <- lip
time <- seq(0,350,by=7)
matplot(time,data_L,type='l',main='Lip data',ylab='Position',
xlab='Time (millisec.)')
basis <- create.fourier.basis(rangeval=c(0,350),nbasis=51)
data_L.fd <- Data2fd(data_L,time,basis)
plot.fd(data_L.fd, main="Fourier")
# Better to use a b-spline basis
basis <- create.bspline.basis(rangeval=c(0,350),nbasis=21)
data_L.fd <- Data2fd(y = data_L,argvals = time,basisobj = basis)
plot.fd(data_L.fd, main="B-splines")
layout(cbind(1,2))
plot.fd(data_L.fd,xaxs='i')
lines(mean.fd(data_L.fd),lwd=2)
eval <- eval.fd(time,data_L.fd)
x11()
image.plot(time, time, (cov(t(eval))[1:51,]))
plot.fd(data_L.fd)
pca_L <- pca.fd(data_L.fd,nharm=5,centerfns=TRUE)
# scree plot
plot(pca_L$values,xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_L$values)/sum(pca_L$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# First three FPCs
x11()
layout(cbind(1,2,3))
plot(pca_L$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.09,0.11))
plot(pca_L$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.09,0.11))
plot(pca_L$harmonics[3,],col=3,ylab='FPC3',ylim=c(-0.09,0.11))
# plot of the principal components as perturbation of the mean
media <- mean.fd(data_L.fd)
plot(media,lwd=2,ylim=c(-10,12),main='FPC1')
lines(media+pca_L$harmonic[1,]*sqrt(pca_L$values[1]), col=2)
lines(media-pca_L$harmonic[1,]*sqrt(pca_L$values[1]), col=3)
plot(media,lwd=2,ylim=c(-10,12),main='FPC2')
lines(media+pca_L$harmonic[2,]*sqrt(pca_L$values[2]), col=2)
lines(media-pca_L$harmonic[2,]*sqrt(pca_L$values[2]), col=3)
plot(media,lwd=2,ylim=c(-10,12),main='FPC3')
lines(media+pca_L$harmonic[3,]*sqrt(pca_L$values[3]), col=2)
lines(media-pca_L$harmonic[3,]*sqrt(pca_L$values[3]), col=3)
# Command of the library fda that automatically does these plots
par(mfrow=c(1,3))
plot.pca.fd(pca_L, nx=100, pointplot=TRUE, harm=c(1,2,3), expand=0, cycle=FALSE)
# Scores
layout(cbind(1,2,3))
plot(pca_L$scores[,1],pca_L$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca_L$scores[12,1],pca_L$scores[12,2],col=2, lwd=4)
points(pca_L$scores[9,1],pca_L$scores[9,2],col=3, lwd=4)
plot(pca_L$scores[,1],pca_L$scores[,3],xlab="Scores FPC1",ylab="Scores FPC3",lwd=2)
points(pca_L$scores[12,1],pca_L$scores[12,3],col=2, lwd=4)
points(pca_L$scores[9,1],pca_L$scores[9,3],col=3, lwd=4)
plot(pca_L$scores[,2],pca_L$scores[,3],xlab="Scores FPC2",ylab="Scores FPC3",lwd=2)
points(pca_L$scores[12,2],pca_L$scores[12,3],col=2, lwd=4)
points(pca_L$scores[9,2],pca_L$scores[9,3],col=3, lwd=4)
layout(1)
matplot(eval,type='l')
lines(eval[,12],lwd=4, col=2)
lines(eval[,9],lwd=4, col=3)
graphics.off()
##### FPCA #####
help(pca.fd)
# interpolated data (Choice 3)
plot.fd(data_W.fd.3,ylab='temperature')
pca_W.3 <- pca.fd(data_W.fd.3, nharm=5, centerfns=TRUE)
# scree plot
# pca.fd computes all the 365 eigenvalues, but only the first
# N-1=34 are non-null
plot(pca_W.3$values[1:35],xlab='j',ylab='Eigenvalues')
plot(cumsum(pca_W.3$values)[1:35]/sum(pca_W.3$values),xlab='j',ylab='CPV',ylim=c(0.8,1))
# first two FPCs
x11()
layout(cbind(1,2))
plot(pca_W.3$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.3$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.3)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=2)
lines(media-pca_W.3$harmonics[1,]*sqrt(pca_W.3$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=2)
lines(media-pca_W.3$harmonics[2,]*sqrt(pca_W.3$values[2]), col=3)
