#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# our target - Conc.ppm (fluoride)
# under gaussianity it works better
# under assymetry - it also work better
# our data already look gaussian and symmetric, so don't need log
# log - helped make more symmetric
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro) # Conc.ppm ~ D (same model)
plot(v2)
# I would prefer second model, because we may see that lim(gamm(h)/||h||^2) -> 0
# while in first one it's not
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
# WEIGHTS during fitting -------------------------------------------------------
# how can we choose weights? argument fit.method in fit.variogram
# fit.method = 1 : w = N_j
# fit.method = 2 : w = N_j/gamma(h_j)^2
# fit.method = 6 : w = 1
# fit.method = 7 : w = N_j/h_j^2
# Nj — количество пар точек, попавших в лаг hj (имеющих расстояние "близкое" к hj)
# Например, если лаг 0.1 включает все точки, находящиеся на расстоянии от 0.05 до 0.15, и таких пар 35, то Nj = 35
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
plot(v2, v2.fit)
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm(100, "Sph", 0.02), fit.method = 7) # 7 - by defauls
# I did't indicate nugget, so model don't use it
v2.fit_sph # here we see psill and range (estimated)
plot(v2, v2.fit_sph)
# Final comparison plot
plot.new()
plot(v2$dist, v2$gamma, pch = 19, main = "Empirical and Fitted Variograms",
xlab = "Distance", ylab = "Semivariance", ylim = c(0, max(v2$gamma)*1.2))
d.seq <- seq(0, max(v2$dist), length.out = 100)
gamma1 <- variogramLine(v2.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma1, col = "blue", lwd = 2)
gamma2 <- variogramLine(v2.fit_sph, dist_vector = d.seq)$gamma
lines(d.seq, gamma2, col = "red", lwd = 2)
legend("bottomright", legend = c("Model Spherical", "Model Spherical + nugget"),
col = c("blue", "red"), lwd = 2, bty = "n")
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro) # Conc.ppm ~ D (same model)
plot(v2)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro) # Conc.ppm ~ D (same model)
plot(v2)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
dev.off()
# river meuse
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
dev.off()
# histogram of zinc variable
hist(meuse$zinc, breaks=16, col="grey", main='Histogram of Zn', prob = TRUE, xlab = 'Zn')
# highly skewed, transform to the log
hist(log(meuse$zinc), breaks=16, col="grey", main='Histogram of log(Zn)', prob = TRUE, xlab = 'log(Zn)')
# scatterplot of log(zinc) with respect to distance from the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
# Negative correlation: lower distance from the river => higher level of zinc
dev.off()
# sample variogram (binned estimator)
# try to estimate variogram of the data
# z_s = m + delta_s
# delta_s - second order stationary (stationory condition)
svgm <- variogram(log(zinc) ~ 1, meuse) # ~ 1 - mean we use only intercept in our variogram model
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
# the following
plot(variogram(log(zinc) ~ 1, meuse),pch=19)
# suggestion - insepct at least 4 direction
plot(variogram(log(zinc) ~ 1, meuse, alpha = c(0, 45, 90, 135)),pch=19)
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1000, width = 1000/15),pch=19)
# intervals can have different widths: to fix varying widths use the argument
# boudaries
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,200,seq(400,1500,100))),pch=19)
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1000, width = 1000/5),pch=19)
# list of parametric isotropic variogram models
vgm()
# some examples...
vgm(1, "Sph", 300)
vgm(1, "Sph", 300, 0.5)
# one can also add two or more models
v1 <- vgm(1, "Sph", 300, 0.5)
v2 <- vgm(0.8, "Sph", 800, add.to = v1)
v2
# this is only measurement error
vgm(0.5, "Nug", 0)
v <- variogram(log(zinc) ~ 1, meuse)
v
plot(v,pch=19)
# try reasonable initial values
fit.variogram(v, vgm(1, "Sph", 800, 1))
# try unreasonable initial values
fit.variogram(v, vgm(1, "Sph", 10, 1))
# plot of the final fit
v <- variogram(log(zinc) ~ 1, meuse)
v.fit <- fit.variogram(v, vgm(1, "Sph", 800, 1))
plot(v, v.fit, pch = 19)
v.fit
# fitting method: non linear regression with minimization of weighted
# sum of squares error. final value of the minimum
attr(v.fit, 'SSErr')
# ex: fix the nugget variance to the value 0.06
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE)) # first correspnd to nugget, second for spherical model
# the range parameters can be fixed using argument fit.ranges
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(TRUE, TRUE))
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(TRUE, FALSE))
fit.variogram.reml(log(zinc)~1, meuse, model=vgm(0.6, "Sph", 800, 0.06))
v.fit
## modeling anisotropy*
v.dir <- variogram(log(zinc)~1, meuse, alpha=(0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45, 0.3))
print(plot(v.dir, v.anis, pch=19))
## Prediction at a single new location
s0.new=data.frame(x=179180, y=330100) # UTM coordinates
coordinates(s0.new)=c('x','y')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
plot(s0.new, add = TRUE, col='red', lwd = 2)
title('meuse river geostatistical data')
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
g.tr <- gstat(formula = log(zinc) ~ 1, data = meuse, model = v.fit)
## ordinary kriging
# Make the ordinary kriging prediction with the function:
# predict(obj, grid, BLUE=FALSE)
# this gives the prediction of Y(s_0):
predict(g.tr, s0.new)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
# Update gstat object with variogram model
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.gls.fit, set = list(gls=1))
# Estimate the variogram from GLS residuals:
?variogram.gstat
v.gls<-variogram(meuse.gstat)
plot(v.gls)
v.gls.fit <- fit.variogram(v.gls, vgm(1, "Sph", 1000, 1))
plot(v.gls, v.gls.fit, pch = 19)
# Update gstat object with variogram model
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.gls.fit, set = list(gls=1))
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
g.tr <- gstat(formula = log(zinc) ~ 1, data = meuse, model = v.fit)
## ordinary kriging
# Make the ordinary kriging prediction with the function:
# predict(obj, grid, BLUE=FALSE)
# this gives the prediction of Y(s_0):
predict(g.tr, s0.new)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
# this gives the estimate of the mean
# (drift component) under gls
predict(g.tr, meuse[1,], BLUE = TRUE)
# prediction over the entire grid
lz.ok <- predict(g.tr, meuse.grid, BLUE = FALSE)
spplot(lz.ok)
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.fit, set = list(gls=1))
meuse.gstat
# Estimate the variogram from GLS residuals:
?variogram.gstat
v.gls<-variogram(meuse.gstat)
plot(v.gls)
v.gls.fit <- fit.variogram(v.gls, vgm(1, "Sph", 1000, 1))
plot(v.gls, v.gls.fit, pch = 19)
# Update gstat object with variogram model
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.gls.fit, set = list(gls=1))
## universal kriging:
## I have to define the covariate in s_0
s0.vec <- as.vector(slot(s0.new,'coords'))
# distance to the river: calculate the distance between s0 and each point of
# the river, then select the minimum
s0.dist <- min(rowSums(scale(meuse.riv,s0.vec)^2))
s0.new <- as.data.frame(c(s0.new,s0.dist))
names(s0.new) <- c('x','y','dist')
coordinates(s0.new) <- c('x','y')
s0.new <- as(s0.new, 'SpatialPointsDataFrame')
s0.new
# Function "predict" uses the residual variogram stored in the gstat
# object to make the prediction
predict(meuse.gstat, s0.new)
# this gives the estimate of x(s_0)'*beta
# (trend component) under gls
predict(meuse.gstat, s0.new, BLUE = TRUE)
# prediction over the entire grid
lz.uk <- predict(meuse.gstat, meuse.grid, BLUE=FALSE)
# estimate of the mean over the entire grid
lz.uk.BLUE <- predict(meuse.gstat, meuse.grid, BLUE=TRUE)
spplot(lz.ok[,1], main = 'Ordinary Kriging, gstat')
spplot(lz.uk[,1], main = 'Universal Kriging, gstat')
spplot(lz.uk.BLUE[,1], main = 'Universal Kriging - drift , gstat')
# Is the drift important to explain the variability of the response variable?
# Let's compare the variogram of the data and of the residuals:
plot(v$dist,v$gamma,xlab='distance',ylab='semivariance',pch=19,col='skyblue1',ylim=c(0,0.8))
curve(v.f.est(x, C0=v.fit[2,2]+v.fit[1,2], cov.pars=rbind(c(v.fit[2,2], v.fit[2,3]),c(v.fit[1,2], v.fit[1,3])), cov.model = c("spherical","pure.nugget")), from = 0.0001, to = 1600,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='skyblue1',lwd=2, ylim=c(0,110))
points(v.gls$dist,v.gls$gamma,xlab='distance',ylab='semivariance',pch=19,col='steelblue',ylim=c(0,0.8))
curve(v.f.est(x, C0=v.gls.fit[2,2]+v.gls.fit[1,2],
cov.pars=rbind(c(v.gls.fit[2,2], v.gls.fit[2,3]),c(v.gls.fit[1,2], v.gls.fit[1,3])), cov.model = c("spherical","pure.nugget")), from = 0.0001, to = 1600,
xlab = "distance", ylab = expression(gamma(h)),
main = "Variogram model",add=TRUE,col='steelblue',lwd=2, ylim=c(0,110))
graphics.off()
# Data import
data=read.table('fluoruro.txt')
names(data)[3]='f'
attach(data)
coordinates(data)=c('X','Y')
v=variogram(f ~ 1, data=data)
plot(v,pch=19)
v.t=variogram(f ~ D, data=data)
plot(v.t,pch=19)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
v.fit2 <- fit.variogram(v.t, vgm(100, "Gau", 0.02))
plot(v.t, v.fit2, pch = 3)
v.fit2
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v.fit1 <- fit.variogram(v.t, vgm(100, "Sph", 0.05))
plot(v.t, v.fit1, pch = 3)
v.fit1
g.t <- gstat(formula = f ~ D, data = data, model = v.fit2)
D.s0=0.1970
s0=as.data.frame(matrix(c(0.3, 0.24, D.s0),1,3))
names(s0)=c('X','Y','D')
coordinates(s0)=c('X','Y')
predict(g.t, s0, BLUE = FALSE)
predict(g.t, s0, BLUE = TRUE)
detach(data)
predict(g.tr, s0.new)
## Clear the workspace
rm(list=ls())
library(sp)           ## Data management
library(lattice)      ## Data management
library(geoR)         ## Geostatistics
library(gstat)        ## Geostatistics
## Set working directory
setwd("~/Documents/Politecnico/Didattica/2025 Applied Statistics/Geostatistics")
## Functions for graphics
v.f <- function(x, ...){100-cov.spatial(x, ...)}
v.f.est<-function(x,C0, ...){C0-cov.spatial(x, ...)}
data(meuse)
## Define the sample coordinates
coordinates(meuse) <- c('x','y')
# bubble plot(obj,zcol,...)
# key.space=location of the key
bubble(meuse,'zinc',do.log=TRUE,key.space='bottom')
dev.off()
# river meuse
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)), "meuse.riv"))
meuse.sr <- SpatialPolygons(meuse.lst)
# grid for prediction
data(meuse.grid)
is(meuse.grid)
coordinates(meuse.grid) <- c('x','y')
meuse.grid <- as(meuse.grid, 'SpatialPixelsDataFrame')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
title('meuse river geostatistical data')
dev.off()
# histogram of zinc variable
hist(meuse$zinc, breaks=16, col="grey", main='Histogram of Zn', prob = TRUE, xlab = 'Zn')
# highly skewed, transform to the log
hist(log(meuse$zinc), breaks=16, col="grey", main='Histogram of log(Zn)', prob = TRUE, xlab = 'log(Zn)')
# scatterplot of log(zinc) with respect to distance from the river
xyplot(log(zinc) ~ sqrt(dist), as.data.frame(meuse))
# Negative correlation: lower distance from the river => higher level of zinc
dev.off()
# sample variogram (binned estimator)
# try to estimate variogram of the data
# z_s = m + delta_s
# delta_s - second order stationary (stationory condition)
svgm <- variogram(log(zinc) ~ 1, meuse) # ~ 1 - mean we use only intercept in our variogram model
plot(svgm, main = 'Sample Variogram',pch=19)
dev.off()
# the following
plot(variogram(log(zinc) ~ 1, meuse),pch=19)
# suggestion - insepct at least 4 direction
plot(variogram(log(zinc) ~ 1, meuse, alpha = c(0, 45, 90, 135)),pch=19)
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1000, width = 1000/15),pch=19)
# intervals can have different widths: to fix varying widths use the argument
# boudaries
plot(variogram(log(zinc) ~ 1, meuse, boundaries = c(0,200,seq(400,1500,100))),pch=19)
plot(variogram(log(zinc) ~ 1, meuse, cutoff = 1000, width = 1000/5),pch=19)
# list of parametric isotropic variogram models
vgm()
# some examples...
vgm(1, "Sph", 300)
vgm(1, "Sph", 300, 0.5)
# one can also add two or more models
v1 <- vgm(1, "Sph", 300, 0.5)
v2 <- vgm(0.8, "Sph", 800, add.to = v1)
v2
# this is only measurement error
vgm(0.5, "Nug", 0)
v <- variogram(log(zinc) ~ 1, meuse)
v
plot(v,pch=19)
# try reasonable initial values
fit.variogram(v, vgm(1, "Sph", 800, 1))
# try unreasonable initial values
fit.variogram(v, vgm(1, "Sph", 10, 1))
# plot of the final fit
v <- variogram(log(zinc) ~ 1, meuse)
v.fit <- fit.variogram(v, vgm(1, "Sph", 800, 1))
plot(v, v.fit, pch = 19)
v.fit
# fitting method: non linear regression with minimization of weighted
# sum of squares error. final value of the minimum
attr(v.fit, 'SSErr')
# ex: fix the nugget variance to the value 0.06
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(FALSE, TRUE)) # first correspnd to nugget, second for spherical model
# the range parameters can be fixed using argument fit.ranges
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(TRUE, TRUE))
fit.variogram(v, vgm(1, "Sph", 800, 0.06), fit.sills = c(TRUE, FALSE))
fit.variogram.reml(log(zinc)~1, meuse, model=vgm(0.6, "Sph", 800, 0.06))
v.fit
## modeling anisotropy*
v.dir <- variogram(log(zinc)~1, meuse, alpha=(0:3)*45)
v.anis <- vgm(.6, "Sph", 1600, .05, anis=c(45, 0.3))
print(plot(v.dir, v.anis, pch=19))
## Prediction at a single new location
s0.new=data.frame(x=179180, y=330100) # UTM coordinates
coordinates(s0.new)=c('x','y')
# plot all together
image(meuse.grid, col = "lightgrey")
plot(meuse.sr, col = "grey", add = TRUE)
plot(meuse, add = TRUE)
plot(s0.new, add = TRUE, col='red', lwd = 2)
title('meuse river geostatistical data')
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
g.tr <- gstat(formula = log(zinc) ~ 1, data = meuse, model = v.fit)
## ordinary kriging
# Make the ordinary kriging prediction with the function:
# predict(obj, grid, BLUE=FALSE)
# this gives the prediction of Y(s_0):
predict(g.tr, s0.new)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
## consider a location where I OBSERVE data
# this gives the prediction of Y(s_0)
# in the first location (zero variance!)
meuse[1,]
predict(g.tr, meuse[1,])
# this gives the estimate of the mean
# (drift component) under gls
predict(g.tr, meuse[1,], BLUE = TRUE)
# prediction over the entire grid
lz.ok <- predict(g.tr, meuse.grid, BLUE = FALSE)
spplot(lz.ok)
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.fit, set = list(gls=1))
meuse.gstat
# Estimate the variogram from GLS residuals:
?variogram.gstat
v.gls<-variogram(meuse.gstat)
plot(v.gls)
v.gls.fit <- fit.variogram(v.gls, vgm(1, "Sph", 1000, 1))
plot(v.gls, v.gls.fit, pch = 19)
# Update gstat object with variogram model
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.gls.fit, set = list(gls=1))
## universal kriging:
## I have to define the covariate in s_0
s0.vec <- as.vector(slot(s0.new,'coords'))
# distance to the river: calculate the distance between s0 and each point of
# the river, then select the minimum
s0.dist <- min(rowSums(scale(meuse.riv,s0.vec)^2))
s0.new <- as.data.frame(c(s0.new,s0.dist))
names(s0.new) <- c('x','y','dist')
coordinates(s0.new) <- c('x','y')
s0.new <- as(s0.new, 'SpatialPointsDataFrame')
s0.new
# Function "predict" uses the residual variogram stored in the gstat
# object to make the prediction
predict(meuse.gstat, s0.new)
# this gives the estimate of x(s_0)'*beta
# (trend component) under gls
predict(meuse.gstat, s0.new, BLUE = TRUE)
# prediction over the entire grid
lz.uk <- predict(meuse.gstat, meuse.grid, BLUE=FALSE)
# estimate of the mean over the entire grid
lz.uk.BLUE <- predict(meuse.gstat, meuse.grid, BLUE=TRUE)
spplot(lz.ok[,1], main = 'Ordinary Kriging, gstat')
spplot(lz.uk[,1], main = 'Universal Kriging, gstat')
spplot(lz.uk.BLUE[,1], main = 'Universal Kriging - drift , gstat')
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
g.tr <- gstat(formula = log(zinc) ~ 1, data = meuse, model = v.fit)
## ordinary kriging
# Make the ordinary kriging prediction with the function:
# predict(obj, grid, BLUE=FALSE)
# this gives the prediction of Y(s_0):
predict(g.tr, s0.new)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
# Estimate the mean:use the argument 'BLUE'
predict(g.tr, s0.new, BLUE = TRUE)
# Create a gstat object setting a spherical (residual) variogram
# gstat(g.obj, id, formula, data, model, set,...)
meuse.gstat <- gstat(id = 'zinc', formula = log(zinc) ~ sqrt(dist),
data = meuse, nmax = 50, model=v.fit, set = list(gls=1))
meuse.gstat
# Estimate the variogram from GLS residuals:
?variogram.gstat
v.gls<-variogram(meuse.gstat)
plot(v.gls)
