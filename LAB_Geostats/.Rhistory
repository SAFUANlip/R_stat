v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.2), fit.method=2)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro)
plot(v2)
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.2), fit.method=2)
# I did't indicate nugget, so model don't use it
v2.fit
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.2))
# I did't indicate nugget, so model don't use it
v2.fit
fluoruro <- read.table("fluoruro.txt", h=TRUE)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro)
plot(v2)
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.2))
# I did't indicate nugget, so model don't use it
v2.fit
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02))
# I did't indicate nugget, so model don't use it
v2.fit
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 2)
# I did't indicate nugget, so model don't use it
v2.fit
# Data import
data=read.table('fluoruro.txt')
names(data)[3]='f'
attach(data)
coordinates(data)=c('X','Y')
v=variogram(f ~ 1, data=data)
# Data import
data=read.table('fluoruro.txt')
names(data)[3]='f'
attach(data)
coordinates(data)=c('X','Y')
v=variogram(f ~ 1, data=data)
plot(v,pch=19)
v.t=variogram(f ~ D, data=data)
plot(v.t,pch=19)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
v.fit2 <- fit.variogram(v.t, vgm(100, "Gau", 0.02))
plot(v.t, v.fit2, pch = 3)
v.fit2
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), )
# I did't indicate nugget, so model don't use it
v2.fit
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 2)
# I did't indicate nugget, so model don't use it
v2.fit
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by defauls
# I did't indicate nugget, so model don't use it
v2.fit
summary(v2.fit)
plot(v2, v2.fit)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm("Sph"), fit.method = 7) # 7 - by defauls
# I did't indicate nugget, so model don't use it
v2.fit_sph # here we see psill and range (estimated)
plot(v2, v2.fit_sph)
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm("Sph"), fit.method = 7) # 7 - by defauls
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm(100, "Sph", 0.02), fit.method = 7) # 7 - by defauls
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm(100, "Sph", 0.02), fit.method = 7) # 7 - by defauls
# I did't indicate nugget, so model don't use it
v2.fit_sph # here we see psill and range (estimated)
plot(v2, v2.fit_sph)
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
plot(v2, v2.fit)
plot(v2, pch = 19, main = "Empirical vs Fitted Variograms")  # Эмпирическая
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
lines(variogramLine(v2.fit_sph), col = "red", lwd = 2)
plot(v2, pch = 19, main = "Empirical vs Fitted Variograms")  # Эмпирическая
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
plot(v2, pch = 19, main = "Empirical vs Fitted Variograms")  # Эмпирическая
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Gaussian", "Spherical"), col = c("blue", "red"), lwd = 2)
plot(v2, v2.fit)
plot(v2, v2.fit_sph)
s0.new=data.frame(X=0.3, Y=0.24, D=0.1970) # UTM coordinates
coordinates(s0.new)=c('X','Y')
View(s0.new)
g.tr <- gstat(formula = Conc.ppm ~ 1 + D, data = fluoruro, model = v2.fit)
predict(g.tr, s0.new)
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro)
plot(v2)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ D, fluoruro)
plot(v2)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro)
v2
s0.new=data.frame(X=0.3, Y=0.24, D=0.1970) # UTM coordinates
s0.new=data.frame(X=0.3, Y=0.24, D=0.1970) # UTM coordinates
coordinates(s0.new)=c('X','Y')
g.tr <- gstat(formula = Conc.ppm ~ 1 + D, data = fluoruro, model = v2.fit)
predict(g.tr, s0.new)
g.t <- gstat(formula = f ~ D, data = data, model = v.fit2)
D.s0=0.1970
s0=as.data.frame(matrix(c(0.3, 0.24, D.s0),1,3))
names(s0)=c('X','Y','D')
coordinates(s0)=c('X','Y')
predict(g.t, s0, BLUE = FALSE)
# var1.var - MSE of prediction
z <- qnorm(0.975)  # ≈ 1.96
lower <- 50.80604 - z * sqrt(98.66119)
upper <- 50.80604 + z * sqrt(98.66119)
predict(g.tr, s0.new, BLUE = TRUE)
predict(g.tr, s0.new)
radioville <- read.table("radioville.txt", h=TRUE)
View(radioville)
data(meuse)
View(meuse)
View(radioville)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
View(fluoruro)
View(radioville)
coordinates(radioville) <- c('Long', 'Lat')
View(radioville)
View(radioville)
View(radioville@data)
v <- variogram(Bq ~ 1 + D, radioville)
v
plot(v)
data <- read.table('radioville.txt',header=TRUE)
attach(data)
# create dummy: 0 = urban, 1 = vegetation
DUMMY <- rep(0,length(D))
DUMMY[which(D=='V')] <- 1
data <- data.frame(cbind(Bq,Long,Lat,DUMMY))
names(data) <- c('Bq','Long','Lat','D')
coordinates(data) <- c('Long','Lat')
v <- variogram(Bq ~ D, data = data)
plot(v)
hist(radioville$Bq, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
v1.fit <- fit.variogram(v, vgm(1, "Sph", 0.7), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v1.fit # here we see psill and range (estimated)
plot(v, v1.fit)
v2.fit <- fit.variogram(v, vgm(1, "Sph", 0.7, 0.1), fit.method = 7) # 7 - by default (Weighted least squares)
v2.fit <- fit.variogram(v, vgm(1, "Sph", 0.7, nugget = 0.1), fit.method = 7) # 7 - by default (Weighted least squares)
v2.fit # here we see psill and range (estimated)
plot(v, v2.fit)
plot(v, v1.fit, v2.fit)
plot(v, (v1.fit, v2.fit))
v2.fit
v2.fit$psill
v2.fit$model
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")  # Эмпирическая
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
# Построим эмпирическую вариограмму
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
# Добавим легенду
legend("bottomright", legend = c("Gaussian", "Spherical"),
col = c("blue", "red"), lwd = 2)
v
# Построим эмпирическую вариограмму
plot(v$gamma, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v2.fit, maxdist = max(v2$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit_sph, maxdist = max(v2$dist)), col = "red", lwd = 2)
# Добавим легенду
legend("bottomright", legend = c("Gaussian", "Spherical"),
col = c("blue", "red"), lwd = 2)
v
# Построим эмпирическую вариограмму
plot(v$gamma, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
# a)
# firstly we need empirical variogram, and then we may fit our models on it
coordinates(radioville) <- c('Long', 'Lat')
v <- variogram(Bq ~ 1 + D, radioville)
plot(v)
hist(radioville$Bq, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
v1.fit <- fit.variogram(v, vgm(1, "Sph", 0.7), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v1.fit # here we see psill and range (estimated)
plot(v, v1.fit)
v2.fit <- fit.variogram(v, vgm(1, "Sph", 0.7, nugget = 0.1), fit.method = 7) # 7 - by default (Weighted least squares)
v2.fit # here we see psill and range (estimated)
plot(v, v2.fit)
# Построим эмпирическую вариограмму
plot(v$gamma, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
# Построим эмпирическую вариограмму
plot(v$gamma, v$dist, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
# Добавим легенду
legend("bottomright", legend = c("Gaussian", "Spherical"),
col = c("blue", "red"), lwd = 2)
# Построим эмпирическую вариограмму
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
plot(v)
plot(v$gamma, v$dist, pch = 19, main = "Empirical vs Fitted Variograms")
v
plot.new()
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
# Наложим подогнанную Гауссовскую модель
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
# Добавим легенду
legend("bottomright", legend = c("Gaussian", "Spherical"),
col = c("blue", "red"), lwd = 2)
plot(v, v2.fit)
plot(v)
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
# Наложим подогнанную сферическую модель
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Gaussian", "Spherical"),
col = c("blue", "red"), lwd = 2)
dev.off()
plot.new()
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Spherical", "Spherical + Nugget"),
col = c("blue", "red"), lwd = 2)
radioville <- read.table("radioville.txt", h=TRUE)
# a)
# firstly we need empirical variogram, and then we may fit our models on it
coordinates(radioville) <- c('Long', 'Lat')
v <- variogram(Bq ~ 1 + D, radioville)
plot(v)
hist(radioville$Bq, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
v1.fit <- fit.variogram(v, vgm(1, "Sph", 0.7), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v1.fit # here we see psill and range (estimated)
plot(v, v1.fit)
v2.fit <- fit.variogram(v, vgm(1, "Sph", 0.7, nugget = 0.1), fit.method = 7) # 7 - by default (Weighted least squares)
v2.fit # here we see psill and range (estimated)
plot(v, v2.fit)
dev.off()
plot.new()
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Spherical", "Spherical + Nugget"),
col = c("blue", "red"), lwd = 2)
print(v1.fit)
dev.off()
plot.new()
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
legend("bottomright", legend = c("Spherical", "Spherical + Nugget"),
col = c("blue", "red"), lwd = 2)
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
dev.off()
plot.new()
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Spherical", "Spherical + Nugget"),
col = c("blue", "red"), lwd = 2)
# Clear device again
dev.off()
# Final comparison plot
plot.new()
plot(v, pch = 19, main = "Empirical vs Fitted Variograms")
lines(variogramLine(v1.fit, maxdist = max(v$dist)), col = "blue", lwd = 2)
lines(variogramLine(v2.fit, maxdist = max(v$dist)), col = "red", lwd = 2)
legend("bottomright", legend = c("Spherical", "Spherical + Nugget"),
col = c("blue", "red"), lwd = 2)
# Построить график с точками эмпирической вариограммы
plot(v$dist, v$gamma, pch = 19, main = "Empirical and Fitted Variograms",
xlab = "Distance", ylab = "Semivariance", ylim = c(0, max(v$gamma)*1.2))
# Нарисовать первую модель (например, Gaussian)
d.seq <- seq(0, max(v$dist), length.out = 100)
gamma1 <- variogramLine(v1.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma1, col = "blue", lwd = 2)
# Нарисовать вторую модель (например, Spherical)
gamma2 <- variogramLine(v2.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma2, col = "red", lwd = 2)
# Легенда
legend("bottomright", legend = c("Model 1", "Model 2"),
col = c("blue", "red"), lwd = 2, bty = "n")
# Легенда
legend("bottomright", legend = c("Model Spherical", "Model Spherical + nugget"),
col = c("blue", "red"), lwd = 2, bty = "n")
# Clear device again
dev.off()
# Final comparison plot
plot.new()
plot(v$dist, v$gamma, pch = 19, main = "Empirical and Fitted Variograms",
xlab = "Distance", ylab = "Semivariance", ylim = c(0, max(v$gamma)*1.2))
d.seq <- seq(0, max(v$dist), length.out = 100)
gamma1 <- variogramLine(v1.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma1, col = "blue", lwd = 2)
gamma2 <- variogramLine(v2.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma2, col = "red", lwd = 2)
legend("bottomright", legend = c("Model Spherical", "Model Spherical + nugget"),
col = c("blue", "red"), lwd = 2, bty = "n")
View(radioville)
View(radioville)
s1.new=data.frame(Long=78.59, Lat=35.34, "U") # UTM coordinates
coordinates(s1.new)=c('Long','Lat')
s2.new=data.frame(Long=77.6, Lat=34.99, "V")
coordinates(s2.new)=c('Long','Lat')
g.tr <- gstat(formula = Bq ~ 1 + D, data = radioville, model = v2.fit)
predict(g.tr, s1.new)
View(radioville)
s1.new=data.frame(Long=78.59, Lat=35.34, D="U") # UTM coordinates
coordinates(s1.new)=c('Long','Lat')
s2.new=data.frame(Long=77.6, Lat=34.99, D="V")
coordinates(s2.new)=c('Long','Lat')
g.tr <- gstat(formula = Bq ~ 1 + D, data = radioville, model = v2.fit)
predict(g.tr, s1.new)
predict(g.tr, s2.new)
data <- read.table('radioville.txt',header=TRUE)
attach(data)
# create dummy: 0 = urban, 1 = vegetation
DUMMY <- rep(0,length(D))
DUMMY[which(D=='V')] <- 1
data <- data.frame(cbind(Bq,Long,Lat,DUMMY))
names(data) <- c('Bq','Long','Lat','D')
coordinates(data) <- c('Long','Lat')
v <- variogram(Bq ~ D, data = data)
plot(v)
v.fit1 <- fit.variogram(v, vgm(1, "Sph", 0.5))
plot(v, v.fit1, pch = 3)
v.fit1
# coefficient of the linear model:
# it sufficies to estimate the drift at two locations where we have observations,
# with D=U and D=V
# data[1,] = urbane
# data[6,] = vegetation
g.tr <- gstat(formula = Bq ~ D, data = data, model = v.fit1)
predict(g.tr, data[1,], BLUE = TRUE)
predict(g.tr, data[6,], BLUE = TRUE)
v <- variogram(Bq ~ D, data = data)
plot(v)
v.fit2 <- fit.variogram(v, vgm(0.6, "Sph", 0.5, 0.1))
plot(v, v.fit2, pch = 3)
v.fit2
# it sufficies to estimate the drift at two locations where we have observations,
# with D=U and D=V
# data[1,] = urbane
# data[6,] = vegetation
g.tr <- gstat(formula = Bq ~ D, data = data, model = v.fit2)
predict(g.tr, data[1,], BLUE = TRUE)
predict(g.tr, data[6,], BLUE = TRUE)
## point d)
## predict at 2 new locations: we use model 1 (without nugget)
g.tr <- gstat(formula = Bq ~ D, data = data, model = v.fit1)
# urbane : 78.59,35.34
s0.new <- as.data.frame(matrix(c(78.59,35.34,0),1,3))
names(s0.new) <- c('lon','lat','D')
coordinates(s0.new) <- c('lon','lat')
predict(g.tr, s0.new)
# vegetation : 77.69,34.99
s0.new <- as.data.frame(matrix(c(77.69,34.99,1),1,3))
names(s0.new) <- c('lon','lat','D')
coordinates(s0.new) <- c('lon','lat')
predict(g.tr, s0.new)
proj4string(radioville) <- CRS("+proj=longlat +datum=WGS84")  # indicate, that it long-lat
# Transform to UTM
radioville_utm <- spTransform(radioville, CRS("+proj=utm +zone=17 +datum=WGS84"))
v <- variogram(Bq ~ 1 + D, radioville_utm)
plot(v)
hist(radioville_utm$Bq, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
v1.fit <- fit.variogram(v, vgm(1, "Sph", 0.7), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v1.fit # here we see psill and range (estimated)
plot(v, v1.fit)
v2.fit <- fit.variogram(v, vgm(1, "Sph", 0.7, nugget = 0.1), fit.method = 7) # 7 - by default (Weighted least squares)
v2.fit # here we see psill and range (estimated)
plot(v, v2.fit)
# Clear device again
dev.off()
hist(radioville_utm$Bq, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
v1.fit <- fit.variogram(v, vgm(1, "Sph", 0.7), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v1.fit # here we see psill and range (estimated)
plot(v, v1.fit)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro) # Conc.ppm ~ D (same model)
plot(v2)
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
fluoruro <- read.table("fluoruro.txt", h=TRUE)
## Define the sample coordinates (transform Table to SpatialPointsDataFrame)
coordinates(fluoruro) <- c('X', 'Y')
# isotropic random field - no dependence on direction,
# so whenever we look, it always will be same variogram
plot(fluoruro)
bubble(fluoruro, 'Conc.ppm',do.log=TRUE)
hist(fluoruro$Conc.ppm, breaks=16, col="grey", main='Histogram of Conc.ppm', prob = TRUE, xlab = 'Conc.ppm')
# our target - Conc.ppm (fluoride)
# under gaussianity it works better
# under assymetry - it also work better
# our data already look gaussian and symmetric, so don't need log
# log - helped make more symmetric
# F(s_i)=beta_0+delta(s_i)
# (beta_0 - comman intercept ~ 1 (only intercept),
# delta(s_i) - local fluctuations, addede automaticall to the model)
v1 <- variogram(Conc.ppm ~ 1, fluoruro)
plot(v1)
# F(s_i)=beta_0+beta_1*D.s_i+delta(s_i)
v2 <- variogram(Conc.ppm ~ 1 + D, fluoruro) # Conc.ppm ~ D (same model)
plot(v2)
# I would prefer second model, because we may see that lim(gamm(h)/||h||^2) -> 0
# while in first one it's not
# b) Fit to the empirical variogram at point (a), a Gaussian model
#    without nugget, via weighted least squares. Use as initial parameters:
#    sill=100, range=0.02. Report the estimates of sill and range.
vgm()
# WEIGHTS during fitting -------------------------------------------------------
# how can we choose weights? argument fit.method in fit.variogram
# fit.method = 1 : w = N_j
# fit.method = 2 : w = N_j/gamma(h_j)^2
# fit.method = 6 : w = 1
# fit.method = 7 : w = N_j/h_j^2
# Nj — количество пар точек, попавших в лаг hj (имеющих расстояние "близкое" к hj)
# Например, если лаг 0.1 включает все точки, находящиеся на расстоянии от 0.05 до 0.15, и таких пар 35, то Nj = 35
v2.fit <- fit.variogram(v2, vgm(100, "Gau", 0.02), fit.method = 7) # 7 - by default (Weighted least squares)
# I did't indicate nugget, so model don't use it
v2.fit # here we see psill and range (estimated)
plot(v2, v2.fit)
# c) Fit to the empirical variogram chosen at point (a), a spherical model
#    without nugget, via weighted least squares. Report the estimates of sill
#    and range.
v2.fit_sph <- fit.variogram(v2, vgm(100, "Sph", 0.02), fit.method = 7) # 7 - by defauls
# I did't indicate nugget, so model don't use it
v2.fit_sph # here we see psill and range (estimated)
plot(v2, v2.fit_sph)
# Final comparison plot
plot.new()
plot(v2$dist, v2$gamma, pch = 19, main = "Empirical and Fitted Variograms",
xlab = "Distance", ylab = "Semivariance", ylim = c(0, max(v2$gamma)*1.2))
d.seq <- seq(0, max(v2$dist), length.out = 100)
gamma1 <- variogramLine(v2.fit, dist_vector = d.seq)$gamma
lines(d.seq, gamma1, col = "blue", lwd = 2)
gamma2 <- variogramLine(v2.fit_sph, dist_vector = d.seq)$gamma
lines(d.seq, gamma2, col = "red", lwd = 2)
legend("bottomright", legend = c("Model Spherical", "Model Spherical + nugget"),
col = c("blue", "red"), lwd = 2, bty = "n")
