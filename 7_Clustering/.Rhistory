w <- c(w, sum(k.means$wit))
b <- c(b, k.means$bet)
}
par(mfrow=c(1,1))
matplot(1:10, w/(w+b), pch='', xlab='clusters', ylab='within/tot', main='Choice of k', ylim=c(0,1))
par(mfrow=c(1,1))
matplot(1:10, w/(w+b), pch='', xlab='clusters', ylab='within/tot', main='Choice of k', ylim=c(0,1))
lines(1:10, w/(w+b), type='b', lwd=2)
k.means <- kmeans(moons, centers = 4, nstart = 25)
plot(moons, col=k.means$cluster + 1L, pch=19, main='k-means')
vowels <- read.table('veritatis.txt', header=T)
head(vowels)
dim(vowels)
### question a)
plot(vowels)
HC <- hclust(dist(vowels, method='manhattan'), method = 'average')
plot(HC, hang=-0.1, sub='', labels=F, xlab='')
# we cut the dendrogram at k=2 clusters
rect.hclust(HC, k=2)
pag <- cutree(HC, k=2)
table(pag)
which(pag==2)
plot(vowels , col=pag+1, asp=1, pch=16, lwd=2)
### question b)
p  <- 5
n1 <- table(pag)[1]
n2 <- table(pag)[2]
# Verify gaussianity
mvn(vowels[pag=='1',])$multivariateNormality
mvn(vowels[pag=='2',])$multivariateNormality
# Test for independent Gaussian populations
t1.mean <- sapply(vowels[pag=='1',],mean)
t2.mean <- sapply(vowels[pag=='2',],mean)
t1.cov  <-  cov(vowels[pag=='1',])
t2.cov  <-  cov(vowels[pag=='2',])
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
# Test: H0: mu.1-mu.2==0 vs H1: mu.1-mu.2!=0
delta.0 <- c(0,0,0,0,0)
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (t1.mean-t2.mean-delta.0) %*% Spinv %*% (t1.mean-t2.mean-delta.0)
P <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
P
### question c)
alpha <- 0.1
IC <- cbind(t2.mean-t1.mean - sqrt(diag(Sp)*(1/n1+1/n2)) * qt(1 - alpha/(p*2), n1+n2-2),
t2.mean-t1.mean,
t2.mean-t1.mean + sqrt(diag(Sp)*(1/n1+1/n2)) * qt(1 - alpha/(p*2), n1+n2-2))
IC
satellite <- read.table('satellite.txt', header=T)
head(satellite)
plot(satellite, asp = 1, pch=16)
D.s <- dist(satellite)
HCa <- hclust(D.s, method = 'average')
plot(HCa, hang=-0.1, sub='', xlab='', labels=F)
# we know that there are 2 clusters, so we cut the dendrograms
# accordingly:
rect.hclust(HCa, k=2)
sata <- cutree(HCa, k=2)
plot(satellite , col=sata+1, asp=1, pch=16, main='Average')
table(sata)
coph.a <- cophenetic(HCa)
coph.sat <- cor(D.s, coph.a)
coph.sat
p  <- 2
n1 <- table(sata)[1]
n2 <- table(sata)[2]
# Verificy Gaussian assumption
mvn(satellite[sata=='1',])$multivariateNormality
mvn(satellite[sata=='2',])$multivariateNormality
t1.mean <- sapply(satellite[sata=='1',],mean)
t2.mean <- sapply(satellite[sata=='2',],mean)
t1.cov  <-  cov(satellite[sata=='1',])
t2.cov  <-  cov(satellite[sata=='2',])
# Homogeneity of covariances
t1.cov
t2.cov
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
# Elliptic confidence region at 99%
alpha <- 0.01
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha, p, n1+n2-1-p)
# Characterize the ellipse:
# Directions of the axes
eigen(Sp)$vector
# Radius
r <- sqrt(cfr.fisher)
# Length of the semi-axes
r*sqrt(eigen(Sp)$values*(1/n1+1/n2))
par(mfrow=c(1,2))
plot(satellite , col=sata+1, asp=1, pch=16, main='Original data and groups')
plot(satellite, xlim=c(-23,-15), ylim=c(-25,-17), pch='', asp=1,
main='Elliptic region for the mean diff. (red - green)')
# confidence region and sample mean in blue
ellipse(center=t1.mean-t2.mean, shape=Sp*(1/n1+1/n2), radius=sqrt(cfr.fisher),
lwd=2, col='blue')
par(mfrow=c(1,1))
stones <- read.table('preziosi.txt',header=TRUE)
plot(stones)
# question a)
p.e <- dist(stones, method='euclidean')
p.ew <- hclust(p.e, method='ward.D2')
plot(p.ew, hang=-0.1, sub='', xlab='', labels=F)
cl.ew <- cutree(p.ew, k=2) # euclidean-ward
# question b)
table(cl.ew)
coph.ew <- cophenetic(p.ew)
ew <- cor(p.e, coph.ew)
ew
# question c)
p.pr<-stones[which(cl.ew==2),]
n <- dim(p.pr)[1]
p <-dim(p.pr)[2]
plot(stones)
points(p.pr, pch=19)
# Verify gaussian assumptions
mvn(p.pr)$multivariateNormality
M <- sapply(p.pr, mean)
S <- cov(p.pr)
alpha <- 0.01
cfr.chisq <- qchisq(1-alpha,p)
# Characterize the ellipse:
# Axes directions:
eigen(S)$vectors
# Center:
M
# Radius of the ellipse:
r <- sqrt(cfr.chisq)
# Length of the semi-axes:
r*sqrt(eigen(S)$values)
plot(p.pr, asp = 1, col='gold', pch=19, xlim=c(-10,50))
points(M[1], M[2], pch = 4, cex = 1.5, lwd = 2)
ellipse(center=M, shape=S, radius=sqrt(cfr.chisq), col = 'black', lty = 2, center.pch = 4)
points(stones[which(cl.ew==1),])
sparrows <- read.table('Pb3.txt')
head(sparrows)
dim(sparrows)
plot(sparrows, pch=16)
gruppi <- hclust(dist(sparrows, method='manhattan'), method='single')
plot(gruppi, hang=-0.1, sub='', xlab='', labels=F)
# cut in two groups
cluster <- cutree(gruppi, k=2)
plot(sparrows, pch=16, col = as.vector(cluster)+1)
### question (b)
g1 <- sparrows[cluster==1,]
g2 <- sparrows[cluster==2,]
g1
g2
# Test: H0: mu.1-mu.2==0 vs H1: mu.1-mu.2!=0
p  <- 2
n1 <- dim(g1)[1]
n2 <- dim(g2)[1]
alpha <- 0.10
mean1 <- sapply(g1,mean)
mean2 <- sapply(g2,mean)
cov1  <-  cov(g1)
cov2  <-  cov(g2)
Sp      <- ((n1-1)*cov1 + (n2-1)*cov2)/(n1+n2-2)
delta.0 <- c(0,0)
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (mean1-mean2-delta.0) %*% Spinv %*% (mean1-mean2-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
pvalue <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pvalue
dm <- (mean1-mean2)
A  <- rbind(c(1,0), c(0,1), c(1,1), c(1,-1))
k  <- dim(A)[1]
A.s2 <- diag(A%*%Sp%*%t(A))
A.dm <- A%*%(mean1-mean2)
Bonf <- cbind(inf=A.dm - qt(1-(alpha/(2*k)), n1+n2-2) * sqrt( A.s2*(1/n1+1/n2) ),
center=A.dm,
sup=A.dm + qt(1-(alpha/(2*k)), n1+n2-2) * sqrt( A.s2*(1/n1+1/n2) ))
Bonf
### question (d)
mvn(g1)$multivariateNormality
mvn(g2)$multivariateNormality
cov1
cov2
# Example : European cities
help(eurodist)
eurodist
# R function for multidimensional scaling: cmdscale
help(cmdscale)
location <- cmdscale(eurodist, k=2)
location
# I have to set asp=1 (equal scales on the two axes)
# to correctly represent Euclidean distances
plot(location[,1], location[,2], type='n', asp=1, axes=FALSE, main="MDS of European cities",xlab='',ylab='')
text(location[,1], location[,2], labels=colnames(as.matrix(eurodist)), cex = 0.75, pos = 3)
# change the sign to get the North in the upper part of the plot
plot(location[,1], -location[,2], type='n', asp=1, axes=FALSE, main="MDS of European cities",xlab='',ylab='')
text(location[,1], -location[,2], labels=colnames(as.matrix(eurodist)), cex = 0.75, pos = 3)
# compare the original matrix d_ij = d(x_i,x_j) and delta_ij = d(y_i,y_j)
plot(eurodist, dist(location)) # have to close to line (new distance have to be proportional to source distance)
# visualize the most different distances
par(cex = 0.75, mar = c(10,10,2,2))
image(1:21, 1:21, asp=1, abs(as.matrix(dist(location)) - as.matrix(eurodist)), axes = F, xlab = '', ylab ='')
axis(1, at = 1:21, labels = colnames(as.matrix(eurodist)), las = 2, cex = 0.75)
axis(2, at = 1:21, labels = colnames(as.matrix(eurodist)), las = 1, cex = 0.75)
box()
# Rome-Athens
as.matrix(eurodist)[19,1]
as.matrix(dist(location))[19,1]
# Cologne-Geneve
as.matrix(eurodist)[6,8]
as.matrix(dist(location))[6,8]
# Compute the "stress": the higher it is, the worse
# the matching between original distances and their
# geometrical representation through MDS
Stressk <- NULL
for(k in 1:4)
{
location.k <- cmdscale(eurodist, k)
Stress <- (sum( (as.vector(eurodist) - as.vector(dist(location.k)))^2)  /
sum( as.vector(location.k)^2))^(1/2)
Stressk <- c(Stressk, Stress)
}
plot(1:4,Stressk,xlab='k',ylab='Stress',lwd=2)
library(mvtnorm)
library(MVN)
library(rgl)
library(car)
library(dbscan)
library(cluster)
library(fields)
veritatis <- read.table("veritatis.txt", h=TRUE)
veritatis <- read.table("veritatis.txt", h=TRUE)
View(veritatis)
help(dist)
m.dist <- dist(veritatis, method="manhattan")
m.dist <- dist(veritatis, method="manhattan")
veritatis.hclust <- hclust(m.dist, method='average')
veritatis.clust <- cutree(veritatis.hclust, k=2)
veritatis.hclust
veritatis.clust
unique(veritatis.clust)
plot(veritatis.hclust)
plot(veritatis.clust)
table(veritatis.hclust)
table(veritatis.clust)
vowels <- read.table('veritatis.txt', header=T)
head(vowels)
dim(vowels)
### question a)
plot(vowels)
HC <- hclust(dist(vowels, method='manhattan'), method = 'average')
plot(HC, hang=-0.1, sub='', labels=F, xlab='')
# we cut the dendrogram at k=2 clusters
rect.hclust(HC, k=2)
pag <- cutree(HC, k=2)
table(pag)
which(pag==2)
plot(vowels , col=pag+1, asp=1, pch=16, lwd=2)
veritatis.clust == 2
which(veritatis.clust == 2)
# b) 5 features => MANOVA, to check mean differences
# but lets check assumtions
mvn(veritatis[which(veritatis.clust == 2)])
# b) 5 features => MANOVA, to check mean differences
# but lets check assumtions
mvn(veritatis[which(veritatis.clust == 2), ])
mvn(veritatis[which(veritatis.clust == 1), ])
cov1 <- cov(veritatis[which(veritatis.clust == 1), ])
cov2 <- cov(veritatis[which(veritatis.clust == 2), ])
image(cov1)
image(cov2)
max(cov1/cov2)
min(cov1/cov2)
fit <- manova(as.matrix(veritatis) ~ veritatis.clust)
summary.manova(fit)
summary.aov(fit)
### question b)
p  <- 5
n1 <- table(pag)[1]
n2 <- table(pag)[2]
# Verify gaussianity
mvn(vowels[pag=='1',])$multivariateNormality
mvn(vowels[pag=='2',])$multivariateNormality
# Test for independent Gaussian populations
t1.mean <- sapply(vowels[pag=='1',],mean)
t2.mean <- sapply(vowels[pag=='2',],mean)
t1.cov  <-  cov(vowels[pag=='1',])
t2.cov  <-  cov(vowels[pag=='2',])
Sp      <- ((n1-1)*t1.cov + (n2-1)*t2.cov)/(n1+n2-2)
Sp
# c) Bonferroni CI
summary.manova(fit)
# c) Bonferroni CI
summary.manova(fit)$Residuals
# c) Bonferroni CI
summary.manova(fit)$$Residuals
summary.manova(fit)$SS
summary.manova(fit)$SS$Residuals
Sp
summary.manova(fit)$SS$Residuals/summary.manova(fit)$df
summary.manova(fit)
summary.manova(fit)$Df
summary.manova(fit)$130
summary.manova(fit)$SS$Residuals/130
Sp
summary.manova(fit)$$Df
summary.manova(fit)$Df$Residuals
summary.manova(fit)
summary.manova(fit)$$Residuals
summary.manova(fit)$Residuals
summary.manova(fit)$Residuals$Df
summary.manova(fit)$$Df
summary.manova(fit)$Df
summary.manova(fit)$df
summary.manova(fit)$$df
summary.manova(fit)$SS$Residuals/130 # degree of freedom taken from manova summary (132 - 2 (n-g))
summary.manova(fit)
summary.manova(fit)$df
Spooled <- summary.manova(fit)$SS$Residuals/130 # degree of freedom taken from manova summary (132 - 2 (n-g))
k <- 5 # 5 Bonferroni CI
cfr.t <- qt(1-alpha/(2*k), 130) # Student quantile
# c) Bonferroni CI
alpha <- 0.1
cfr.t <- qt(1-alpha/(2*k), 130) # Student quantile
m1 <- sapply(veritatis~veritatis.clust,mean)
m1 <- sapply(veritatis[veritatis.clust == 1],mean)
veritatis.clust == 1
m1 <- sapply(veritatis[veritatis.clust == 1,], mean)
m1 <- sapply(veritatis[veritatis.clust == 1,], mean)
m2 <- sapply(veritatis[veritatis.clust == 2,], mean)
m1
m2
W <- summary.manova(fit)$SS$Residuals
k <- 5 # 5 Bonferroni CI
cfr.t <- qt(1-alpha/(2*k), 130) # Student quantile
m1 <- sapply(veritatis[veritatis.clust == 1,], mean)
m2 <- sapply(veritatis[veritatis.clust == 2,], mean)
n1 <- sum(veritatis[veritatis.clust == 1,])
n2 <- sum(veritatis[veritatis.clust == 2,])
inf12 <- m1 - m2 - cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
sup12 <- m1 - m2 + cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
CI <- list(group12    = cbind(inf12, sup12))
CI
IC <- cbind(t2.mean-t1.mean - sqrt(diag(Sp)*(1/n1+1/n2)) * qt(1 - alpha/(p*2), n1+n2-2),
t2.mean-t1.mean,
t2.mean-t1.mean + sqrt(diag(Sp)*(1/n1+1/n2)) * qt(1 - alpha/(p*2), n1+n2-2))
IC
inf12 <- m2 - m1 - cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
sup12 <- m2 - m1 + cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
CI <- list(group12    = cbind(inf12, sup12))
CI
CI <- list(group12    = cbind(inf12, m2 - m1, sup12))
CI
IC
Pb3 <- read.table("Pb3.txt", h=TRUE)
Pb3 <- read.table("Pb3.txt", h=TRUE)
View(Pb3)
plot(Pb3)
m.dist <- dist(Pb3, method="manhattan")
Pb3.hclust <- hclust(m.dist, method='single')
Pb3.clust <- cutree(Pb3.hclust, k=2)
Pb3.clust
plot(Pb3, pch=16, col = as.vector(Pb3.clust)+1)
# b)
fit <- manova.fit(Pb3 ~ Pb3.clust)
# b)
fit <- manova(as.matrix(Pb3) ~ Pb3.clust)
summary.manova(fit)
summary.aov(fit)
# c)
alpha <- 0.1
W <- summary.manova(fit)$SS$Residuals
DF <- 48
k <- 4 # 4 Bonferroni CI
cfr.t <- qt(1-alpha/(2*k), DF) # Student quantile
m1 <- sapply(Pb3[Pb3.clust == 1,], mean)
m2 <- sapply(Pb3[Pb3.clust == 2,], mean)
n1 <- sum(Pb3[Pb3.clust == 1,])
n2 <- sum(Pb3[Pb3.clust == 2,])
A <- matrix((1,0))
inf12 <- m2 - m1 - cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
sup12 <- m2 - m1 + cfr.t * sqrt(diag(W)/(130) * (1/n1+1/n2))
CI <- list(group12    = cbind(inf12, m2 - m1, sup12))
CI
View(Pb3)
inf12 <- m2 - m1 - cfr.t * sqrt(diag(W)/(DF) * (1/n1+1/n2))
sup12 <- m2 - m1 + cfr.t * sqrt(diag(W)/(DF) * (1/n1+1/n2))
CI <- list(group12    = cbind(inf12, m2 - m1, sup12))
CI
C <- matrix(
c(1, 0,
0, 1,
0, 0,
1, 1,
1, -1
),
4, 2, byrow=T)
C <- matrix(
c(1, 0,
0, 1,
0, 0,
1, 1,
1, -1,
),
4, 2, byrow=T)
C <- matrix(
c(1, 0,
0, 1,
1, 1,
1, -1,
),
4, 2, byrow=T)
C <- matrix(
c(1, 0,
0, 1,
1, 1,
1, -1
),
4, 2, byrow=T)
mean_comb <- (m2 - m1) %*%C
C
m2 - m1
mean_comb <- (m2 - m1) %*%t(C)
mean_comb
WC <- t(C) %*% mean_comb %*% C
WC <- t(C) %*% W %*% C
W
WC <- C %*% W %*% t(C)
WC <- C %*% W %*% t(C)
inf12 <- mean_comb - cfr.t * sqrt(diag(WC)/(DF) * (1/n1+1/n2))
sup12 <- mean_comb + cfr.t * sqrt(diag(WC)/(DF) * (1/n1+1/n2))
CI <- list(group12    = cbind(inf12, m2 - m1, sup12))
CI <- list(group12    = cbind(inf12, mean_comb, sup12))
CI
View(CI)
inf12
CI <- list(group12    = rbind(inf12, mean_comb, sup12))
CI
CI <- list(group12    = rbind(t(inf12), t(mean_comb), t(sup12))
CI <- list(group12    = rbind(t(inf12), t(mean_comb), t(sup12))
CI <- list(group12    = rbind(inf12, mean_comb, sup12)
CI <- list(group12    = rbind(inf12, mean_comb, sup12)
CI <- list(group12    = cbind(inf12, mean_comb, sup12))
CI
CI <- list(group12    = cbind(t(inf12), t(mean_comb), t(sup12)))
CI
sparrows <- read.table('Pb3.txt')
head(sparrows)
dim(sparrows)
plot(sparrows, pch=16)
gruppi <- hclust(dist(sparrows, method='manhattan'), method='single')
plot(gruppi, hang=-0.1, sub='', xlab='', labels=F)
# cut in two groups
cluster <- cutree(gruppi, k=2)
plot(sparrows, pch=16, col = as.vector(cluster)+1)
### question (b)
g1 <- sparrows[cluster==1,]
g2 <- sparrows[cluster==2,]
g1
g2
# Test: H0: mu.1-mu.2==0 vs H1: mu.1-mu.2!=0
p  <- 2
n1 <- dim(g1)[1]
n2 <- dim(g2)[1]
alpha <- 0.10
mean1 <- sapply(g1,mean)
mean2 <- sapply(g2,mean)
cov1  <-  cov(g1)
cov2  <-  cov(g2)
Sp      <- ((n1-1)*cov1 + (n2-1)*cov2)/(n1+n2-2)
delta.0 <- c(0,0)
Spinv   <- solve(Sp)
T2 <- n1*n2/(n1+n2) * (mean1-mean2-delta.0) %*% Spinv %*% (mean1-mean2-delta.0)
cfr.fisher <- (p*(n1+n2-2)/(n1+n2-1-p))*qf(1-alpha,p,n1+n2-1-p)
pvalue <- 1 - pf(T2/(p*(n1+n2-2)/(n1+n2-1-p)), p, n1+n2-1-p)
pvalue
dm <- (mean1-mean2)
A  <- rbind(c(1,0), c(0,1), c(1,1), c(1,-1))
k  <- dim(A)[1]
pvalue
dm <- (mean1-mean2)
A  <- rbind(c(1,0), c(0,1), c(1,1), c(1,-1))
k  <- dim(A)[1]
A.s2 <- diag(A%*%Sp%*%t(A))
A.dm <- A%*%(mean1-mean2)
Bonf <- cbind(inf=A.dm - qt(1-(alpha/(2*k)), n1+n2-2) * sqrt( A.s2*(1/n1+1/n2) ),
center=A.dm,
sup=A.dm + qt(1-(alpha/(2*k)), n1+n2-2) * sqrt( A.s2*(1/n1+1/n2) ))
Bonf
### question (d)
mvn(g1)$multivariateNormality
mvn(g2)$multivariateNormality
cov1
cov2
Bonf
CI
C <- matrix(
c(1, 0,
0, 1,
1, 1,
1, -1
),
4, 2, byrow=T)
mean_comb <- (m1 - m2) %*% t(C)
WC <- C %*% W %*% t(C)
inf12 <- mean_comb - cfr.t * sqrt(diag(WC)/(DF) * (1/n1+1/n2))
sup12 <- mean_comb + cfr.t * sqrt(diag(WC)/(DF) * (1/n1+1/n2))
CI <- list(group12    = cbind(t(inf12), t(mean_comb), t(sup12)))
CI
Bonf
WC <- C %*% (W/DF) %*% t(C)
inf12 <- mean_comb - cfr.t * sqrt(diag(WC) * (1/n1+1/n2))
sup12 <- mean_comb + cfr.t * sqrt(diag(WC) * (1/n1+1/n2))
CI <- list(group12    = cbind(t(inf12), t(mean_comb), t(sup12)))
CI
diag(WC)
WC
C %*% (W) %*% t(C) / DF
C %*% (W/DF) %*% t(C)
